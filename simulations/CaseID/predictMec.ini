[General]

# this config is to create the mec, run the ML code, and finalizing the results 

cmdenv-autoflush = true

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = true
warmup-period = 0s
repeat = 1
seed-set = ${repetition}

description = "Basic Configuration"
sim-time-limit = ${simtime=60s} # add options to sim-time like this: 60s,7200s,120s etc

##########################################################
#            Output Format Results                       #
##########################################################
# include itervars in the output file names 
output-scalar-file = ./results/predictMec.sca 
output-vector-file = ./results/PredictMec.vec
**.routingRecorder.enabled = false
**.scalar-recording = true
**.vector-recording = true


**.servingCell*.vector-recording = true
**.servedUE*.vector-recording = true
**.cellIdNodeIdCouple*.vector-recording = true
**.simNodeIds*.vector-recording = true
**.coord*.vector-recording = true



############### Network configuration ##################
*.configurator.config = xmldoc("config/demo.xml") 

############### Internet Cloud config ##############
**.internetCloud.ipv4Delayer.config = xmldoc("config/Internetcloud_config_test2.xml")


############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
#**.ueTxPower = 26
#**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
#**.fbPeriod = 40   # reports CQI every 40ms

# ----------------------------------------------------------------------------- #
# Config "RnisTest"
#
[Config RnisTest]
network = PredictMec
description = "With a MEC that does nothing"

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 250m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=2}

*.gNodeB*.cellularNic.numCarriers = 1
*.gNodeB*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.Ue[*].cellularNic.numCarriers = 1
*.Ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1)

############### BS position #################
*.gNodeB1.mobility.initialX = 1000m
*.gNodeB1.mobility.initialY = 1000m


############## UE configuration ##################
*.numUe = ${numUEs=8}
**.ueIdOffset = ${repetition}*${numUEs}

*.numVidUe = ${numVidUes=2}
**.vidUeIdOffset = ${repetition}*${numVidUes}

*.Ue[*].macCellId = 0
*.Ue[*].masterId = 0
*.Ue[*].nrMacCellId = 1
*.Ue[*].nrMasterId = 1

*.VidUe[*].macCellId = 0
*.VidUe[*].masterId = 0
*.VidUe[*].nrMacCellId = 1
*.VidUe[*].nrMasterId = 1


**.dynamicCellAssociation = true
**.enableHandover = true

# tcp settings
#**.tcp.typename = "Tcp"
#**.tcp.advertisedWindow = 65535         # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
#**.tcp.tcpAlgorithmClass = "TcpReno"    # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
#**.tcp.sackSupport = true               # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)

##########################################################
#                    App Layer                           #
##########################################################

#########################_UE Side_#######################
**.Ue[*].numApps = 1
**.Ue[*].app[0].typename = "UdpBasicApp"
**.Ue[*].app[0].messageLength = int(uniform(16B, 512B))    # Packet size for benign traffic
**.Ue[*].app[0].sendInterval = exponential(1s)             # Interval between packets
**.Ue[*].app[0].startTime = uniform(0s, 0.5s)  # Random start time for traffic
**.Ue[*].app[0].timeToLive = int(uniform(5, 20))
**.Ue[*].app[0].destAddresses = "remoteServer"
#**.ue[0..99].app[0].destPort = 3000+ancestorIndex(1)
**.Ue[*].app[0].destPort = 2000 # destPort of 2000 means benign
**.Ue[*].app[0].localPort = 9000
**.Ue[*].app[0].finishTime = ${simtime}

## RemoteServer as receiver
**.remoteServer.numApps = 1
**.remoteServer.app[0].typename = "UdpEchoApp"
#**.remoteServer.app[0].localPort = 3000
**.remoteServer.app[*].localPort = 2000

# VidUE settings
**.VidUe[*].numApps = 1
**.VidUe[*].app[0].typename = "UdpVideoStreamClient"
**.VidUe[*].app[0].serverPort = 4088
**.VidUe[*].app[0].serverAddress = "videoServer"
**.VidUe[*].app[0].localPort = 5555
**.VidUe[*].app[0].startTime = uniform(0s, 1s)


# Video Server settings
**.videoServer.numApps = 1
**.videoServer.app[0].typename = "UdpVideoStreamServer"
**.videoServer.app[0].localPort = 4088
**.videoServer.app[0].sendInterval = 0.1s
**.videoServer.app[0].videoSize = 200MiB
**.videoServer.app[0].packetLen = 1KiB

######################_MEC Host Side_#####################
# resources available
*.mecHost.maxMECApps = 100												#max ME Apps to instantiate
*.mecHost.maxRam = 32GB													#max KBytes of Ram Space
*.mecHost.maxDisk = 100TB												#max KBytes of Ram Space
*.mecHost.maxCpuSpeed = 400000											#max percentage of CPU

*.gNodeB*.mecHost = "mecHost"
*.mecHost.bsList = ["gNodeB1"]
*.mecHost.mecPlatformManager.mecOrchestrator = "mecOrchestrator"

#-------ETSI MEC Services:---------------
**.hasRNISupport = true
*.mecHost.mecPlatform.numMecServices = 1
*.mecHost.mecPlatform.mecService[0].typename = "RNIService"
*.mecHost.mecPlatform.mecService[0].localAddress = "mecHost.virtualisationInfrastructure"
*.mecHost.mecPlatform.mecService[0].localPort = 10020
*.mecHost.mecPlatform.mecService[0].requestServiceTime = 100us

*.mecHost.mecPlatform.serviceRegistry.localAddress = "mecHost.virtualisationInfrastructure"
*.mecHost.mecPlatform.serviceRegistry.localPort = 10021

#------- MEC orchestrator---------------
**.mecOrchestrator.mecHostList = ["mecHost"]

[Config predictMecApp]
# This config does not include malicious traffic
extends = RnisTest
description = "With a MEC that predicts"

*.mecHost.mecPlatform.mecService[0].**.vector-recording = true
*.mecHost.mecPlatform.mecService[0].**.scalar-recording = true

**.numIndependentMecApp = 1
*.mecHost.independentMecApp[0].typename = "PredictMecApp"
*.mecHost.independentMecApp[0].mp1Address= "mecHost.virtualisationInfrastructure"
*.mecHost.independentMecApp[0].mp1Port = 10021
*.mecHost.independentMecApp[0].lambda = 42ms
*.mecHost.independentMecApp[0].startPredictTime = ${simtime}/2


**.crcMode = "computed"
**.fcsMode = "computed"
#
*.localRouter.numPcapRecorders = 1
*.localRouter.pcapRecorder[0].pcapFile = "./results/PCAP-output-predict/localRouter.pcap"
*.localRouter.pcapRecorder[0].moduleNamePatterns = "ipv4"
*.localRouter.pcapRecorder[0].dumpProtocols = "ipv4"
*.localRouter.pcapRecorder[0].alwaysFlush = true

#*.upf.pppIf.recordPcap = true
#*.upf.pppIf.pcapRecorder.pcapFile = "./results/PCAP-output-predict/upf.pcap"
#*.upf.pppIf.pcapRecorder.moduleNamePatterns = "ipv4"
#*.upf.pppIf.pcapRecorder.dumpProtocols = "ipv4"
#*.upf.pppIf.pcapRecorder.alwaysFlush = true



[Config malUe]
# Config with both benign and malicious UEs + MEC
extends = predictMecApp
description = "With malicious UEs"

*.numMalUe = ${numMalUes=10} # 5 malUE and 5 malVidUE
**.malUeIdOffset = ${repetition}*${numMalUes}


## Adding in malicious UEs

*.malUe[*].macCellId = 0
*.malUe[*].masterId = 0
*.[*].nrMacCellId = 1
*.malUe[*].nrMasterId = 1

*.malVidUe[*].macCellId = 0
*.malVidUe[*].masterId = 0
*.malVidUe[*].nrMacCellId = 1
*.malVidUe[*].nrMasterId = 1

**.malVidUe[*].numApps = 1
**.malVidUe[*].app[0].typename = "UdpBasicApp"
**.malVidUe[*].app[0].messageLength = 2048B  # Packet size for malicious traffic
**.malVidUe[*].app[0].sendInterval = exponential(0.00024s)              # Interval between packets
**.malVidUe[*].app[0].startTime = uniform(${simtime}/7, ${simtime}/6) # Random start time for traffic
**.malVidUe[*].app[0].timeToLive = int(uniform(3, 6))
**.malVidUe[*].app[0].destAddresses = "videoServer"
**.malVidUe[*].app[0].destPort = 3000
**.malVidUe[*].app[0].localPort = 9999
**.malVidUe[*].app[0].finishTime = ${simtime}

# malUe traffic settings for UDPBasicApp
**.malUe[*].numApps = 1
**.malUe[*].app[0].typename = "UdpBasicApp"
**.malUe[*].app[0].messageLength = 1024B  # Packet size for malicious traffic
**.malUe[*].app[0].sendInterval = exponential(0.09s)     
**.malUe[*].app[0].startTime = uniform(${simtime}/7,${simtime}/6)  # Random start time for traffic
**.malUe[*].app[0].timeToLive = int(uniform(3, 6))
**.malUe[*].app[0].destAddresses = "remoteServer"
**.malUe[*].app[0].destPort = 3000 # dest port of 3000 means malicious
**.malUe[*].app[0].localPort = 9999
**.malUe[*].app[0].finishTime = ${simtime}


**.mtu = 100000B
